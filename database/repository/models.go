// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0

package repository

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type Transferstatus string

const (
	TransferstatusCreated   Transferstatus = "created"
	TransferstatusProcessed Transferstatus = "processed"
	TransferstatusFailure   Transferstatus = "failure"
	TransferstatusSuccess   Transferstatus = "success"
)

func (e *Transferstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Transferstatus(s)
	case string:
		*e = Transferstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Transferstatus: %T", src)
	}
	return nil
}

type NullTransferstatus struct {
	Transferstatus Transferstatus `json:"transferstatus"`
	Valid          bool           `json:"valid"` // Valid is true if Transferstatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTransferstatus) Scan(value interface{}) error {
	if value == nil {
		ns.Transferstatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Transferstatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTransferstatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Transferstatus), nil
}

type Account struct {
	ID        uuid.UUID `json:"id"`
	Owner     string    `json:"owner"`
	Balance   float64   `json:"balance"`
	Currency  string    `json:"currency"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

type Entry struct {
	ID         uuid.UUID `json:"id"`
	AccountID  uuid.UUID `json:"account_id"`
	TransferID uuid.UUID `json:"transfer_id"`
	Amount     float64   `json:"amount"`
	CreatedAt  time.Time `json:"created_at"`
	UpdatedAt  time.Time `json:"updated_at"`
}

type Transfer struct {
	ID        uuid.UUID      `json:"id"`
	FromAcc   uuid.UUID      `json:"from_acc"`
	ToAcc     uuid.UUID      `json:"to_acc"`
	Amount    float64        `json:"amount"`
	Status    Transferstatus `json:"status"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
}
